{
  "_args": [
    [
      {
        "raw": "react-markdown",
        "scope": null,
        "escapedName": "react-markdown",
        "name": "react-markdown",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/marcstevens/Projects/personal"
    ]
  ],
  "_from": "react-markdown@latest",
  "_id": "react-markdown@3.1.4",
  "_inCache": true,
  "_location": "/react-markdown",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-markdown-3.1.4.tgz_1514673930563_0.523461303440854"
  },
  "_npmUser": {
    "name": "rexxars",
    "email": "rexxars@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-markdown",
    "scope": null,
    "escapedName": "react-markdown",
    "name": "react-markdown",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-markdown/-/react-markdown-3.1.4.tgz",
  "_shasum": "4f37aa5ac4f78f64f93b41b12ad0c08e92eb1680",
  "_shrinkwrap": null,
  "_spec": "react-markdown",
  "_where": "/Users/marcstevens/Projects/personal",
  "author": {
    "name": "Espen Hovlandsdal",
    "email": "espen@hovlandsdal.com"
  },
  "bugs": {
    "url": "https://github.com/rexxars/react-markdown/issues"
  },
  "dependencies": {
    "prop-types": "^15.6.0",
    "remark-parse": "^4.0.0",
    "unified": "^6.1.5",
    "unist-util-visit": "^1.1.3",
    "xtend": "^4.0.1"
  },
  "description": "Renders Markdown as React components",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-loader": "^7.1.2",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.10",
    "babel-preset-env": "^1.6.1",
    "babel-preset-react": "^6.24.1",
    "eslint": "^4.10.0",
    "eslint-config-prettier": "^2.7.0",
    "eslint-config-sanity": "^3.1.0",
    "eslint-plugin-react": "^7.4.0",
    "gh-pages-deploy": "^0.4.2",
    "jest": "^21.2.1",
    "prettier": "^1.8.2",
    "react": "^16.1.0",
    "react-addons-test-utils": "^15.6.2",
    "react-dom": "^16.1.0",
    "react-test-renderer": "^16.0.0",
    "remark-breaks": "^1.0.0",
    "rimraf": "^2.6.2",
    "webpack": "^3.8.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-i8WueytRXbYzyJ2GemIOTMRx/NigPo8r4m3R/KvWD7r+PxPyc9ke66cI3DR7MBRSS+nVG82VWEgRDE1VaZUCqA==",
    "shasum": "4f37aa5ac4f78f64f93b41b12ad0c08e92eb1680",
    "tarball": "https://registry.npmjs.org/react-markdown/-/react-markdown-3.1.4.tgz"
  },
  "gh-pages-deploy": {
    "noprompt": true,
    "prep": [
      "build"
    ],
    "staticpath": "demo/dist"
  },
  "gitHead": "705c4d68de8e7a645aa509965e0847ff197cc3fd",
  "homepage": "https://github.com/rexxars/react-markdown#readme",
  "jest": {
    "verbose": true,
    "testEnvironment": "node",
    "coverageDirectory": "coverage",
    "collectCoverageFrom": [
      "src/**.js"
    ]
  },
  "keywords": [
    "markdown",
    "react",
    "react-component"
  ],
  "license": "MIT",
  "main": "lib/react-markdown.js",
  "maintainers": [
    {
      "name": "rexxars",
      "email": "rexxars@gmail.com"
    }
  ],
  "name": "react-markdown",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0.0 || ^16.0.0"
  },
  "readme": "# react-markdown\n\nRenders Markdown as pure React components.\n\n[![npm version](https://img.shields.io/npm/v/react-markdown.svg?style=flat-square)](http://browsenpm.org/package/react-markdown)[![Build Status](https://img.shields.io/travis/rexxars/react-markdown/master.svg?style=flat-square)](https://travis-ci.org/rexxars/react-markdown)[![Code Climate](https://img.shields.io/codeclimate/github/rexxars/react-markdown.svg?style=flat-square)](https://codeclimate.com/github/rexxars/react-markdown/)\n\nDemo available at http://rexxars.github.io/react-markdown/\n\n---\n\nreact-markdown is proudly sponsored by\n\n<a href=\"https://www.sanity.io/\" rel=\"nofollow\" target=\"_blank\">\n  <img src=\"https://www.sanity.io/static/images/logo_red.svg?v=2\" width=\"300\"><br />\n  Sanity: The Headless CMS Construction Kit\n</a>\n\n---\n\n## Installing\n\n```\nnpm install --save react-markdown\n```\n\n## Basic usage\n\n```js\nconst React = require('react')\nconst ReactDOM = require('react-dom')\nconst ReactMarkdown = require('react-markdown')\n\nconst input = '# This is a header\\n\\nAnd this is a paragraph'\n\nReactDOM.render(\n  <ReactMarkdown source={input} />,\n  document.getElementById('container')\n)\n```\n\n## Notes\n\nIf you don't need to render HTML, this component does not use `dangerouslySetInnerHTML` at all -\nthis is a Good Thingâ„¢.\n\n## Inline HTML is broken\n\nInline HTML is currently broken for any tags that include attributes. A vague idea of how to fix\nthis has been planned, but if you're feeling up to the task, create an issue and let us know!\n\n## Options\n\n* `source` - _string_ The Markdown source to parse (**required**)\n* `className` - _string_ Class name of the container element (default: `''`).\n* `escapeHtml` - _boolean_ Setting to `false` will cause HTML to be rendered (see note above about\n  broken HTML, though). Be aware that setting this to `false` might cause security issues if the\n  input is user-generated. Use at your own risk. (default: `true`).\n* `skipHtml` - _boolean_ Setting to `true` will skip inlined and blocks of HTML (default: `false`).\n* `sourcePos` - _boolean_ Setting to `true` will add `data-sourcepos` attributes to all elements,\n  indicating where in the markdown source they were rendered from (default: `false`).\n* `allowedTypes` - _array_ Defines which types of nodes should be allowed (rendered). (default: all\n  types).\n* `disallowedTypes` - _array_ Defines which types of nodes should be disallowed (not rendered).\n  (default: none).\n* `unwrapDisallowed` - _boolean_ Setting to `true` will try to extract/unwrap the children of\n  disallowed nodes. For instance, if disallowing `Strong`, the default behaviour is to simply skip\n  the text within the strong altogether, while the behaviour some might want is to simply have the\n  text returned without the strong wrapping it. (default: `false`)\n* `allowNode` - _function_ Function execute if in order to determine if the node should be allowed.\n  Ran prior to checking `allowedTypes`/`disallowedTypes`. Returning a truthy value will allow the\n  node to be included. Note that if this function returns `true` and the type is not in\n  `allowedTypes` (or specified as a `disallowedType`), it won't be included. The function will\n  receive three arguments argument (`node`, `index`, `parent`), where `node` contains different\n  properties depending on the node type.\n* `transformLinkUri` - _function|null_ Function that gets called for each encountered link with a\n  single argument - `uri`. The returned value is used in place of the original. The default link URI\n  transformer acts as an XSS-filter, neutralizing things like `javascript:`, `vbscript:` and `file:`\n  protocols. If you specify a custom function, this default filter won't be called, but you can\n  access it as `require('react-markdown').uriTransformer`. If you want to disable the default\n  transformer, pass `null` to this option.\n* `transformImageUri` - _function|null_ Function that gets called for each encountered image with a\n  single argument - `uri`. The returned value is used in place of the original.\n* `renderers` - _object_ An object where the keys represent the node type and the value is a React\n  component. The object is merged with the default renderers. The props passed to the component\n  consties based on the type of node.\n\n## Node types\n\nThe node types available are the following, and applies to both `renderers` and\n`allowedTypes`/`disallowedTypes`:\n\n* `root` - Root container element that contains the rendered markdown\n* `break` - Hard-break (`<br>`)\n* `paragraph` - Paragraph (`<p>`)\n* `emphasis` - Emphasis (`<em>`)\n* `strong` - Strong/bold (`<strong>`)\n* `thematicBreak` - Horizontal rule / thematic break (`<hr>`)\n* `blockquote` - Block quote (`<blockquote>`)\n* `delete` - Deleted/strike-through (`<del>`)\n* `link` - Link (`<a>`)\n* `image` - Image (`<img>`)\n* `linkReference` - Link (through a reference) (`<a>`)\n* `imageReference` - Image (through a reference) (`<img>`)\n* `table` - Table (`<table>`)\n* `tableHead` - Table head (`<thead>`)\n* `tableBody` - Table body (`<tbody>`)\n* `tableRow` - Table row (`<tr>`)\n* `tableCell` - Table cell (`<td>`/`<th>`)\n* `list` - List (`<ul>`/`<ol>`)\n* `listItem` - List item (`<li>`)\n* `definition` - Definition (not rendered by default)\n* `heading` - Heading (`<h1>`-`<h6>`)\n* `inlineCode` - Inline code (`<code>`)\n* `code` - Block of code (`<pre><code>`)\n* `html` - HTML node (Best-effort rendering)\n\nNote: Disallowing a node will also prevent the rendering of any children of that node, unless the\n`unwrapDisallowed` option is set to `true`. Eg, disallowing a paragraph will not render it's\nchildren text nodes.\n\n## Developing\n\n```bash\ngit clone git@github.com:rexxars/react-markdown.git\ncd react-markdown\nnpm install\nnpm test\n```\n\n## License\n\nMIT-licensed. See LICENSE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/rexxars/react-markdown.git"
  },
  "scripts": {
    "build": "npm run clean && npm run compile && NODE_ENV=production webpack -p && npm run build:demo",
    "build:demo": "NODE_ENV=production webpack -p --config webpack.config.demo.js",
    "clean": "rimraf lib/",
    "compile": "babel --copy-files -d lib/ src/",
    "deploy": "gh-pages-deploy",
    "posttest": "eslint .",
    "prepublishOnly": "npm run qa",
    "qa": "npm test && npm run build",
    "test": "jest --coverage",
    "watch": "webpack --watch"
  },
  "version": "3.1.4"
}
